import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton

# –¢–æ–∫–µ–Ω
TOKEN = "7576277750:AAE6KPdzhtEOUi3i12vgK5H5S7w2OrwaqiA"
bot = telebot.TeleBot(TOKEN)

# –°–¥–µ–ª–∫–∏
deals = [
    {"nft_link": "PlushPepe #2536", "rarity": "üíé –õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π", "seller_tag": "@seller_plushpepe",
     "market_link": "https://t.me/nft/PlushPepe-2536", "score": 10.0},  # –õ—É—á—à–∞—è
    {"nft_link": "LowRider #7302", "rarity": "‚ú® –†–µ–¥–∫–∏–π", "seller_tag": "@seller_lowrider",
     "market_link": "https://t.me/nft/LowRider-7302", "score": 9.0},
    {"nft_link": "EvilEye #40584", "rarity": "‚≠êÔ∏è –û–±—ã—á–Ω—ã–π", "seller_tag": "@seller_evileye",
     "market_link": "https://t.me/nft/EvilEye-40584", "score": 8.5},
    {"nft_link": "ArtisanBrick #1452", "rarity": "‚ú® –†–µ–¥–∫–∏–π", "seller_tag": "@seller_artisan1452",
     "market_link": "https://t.me/nft/ArtisanBrick-1452", "score": 8.8},
    {"nft_link": "ArtisanBrick #1184", "rarity": "‚≠êÔ∏è –û–±—ã—á–Ω—ã–π", "seller_tag": "@seller_artisan1184",
     "market_link": "https://t.me/nft/ArtisanBrick-1184", "score": 8.7}
]

# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏
def format_deal(deal):
    return f"{deal['nft_link']} | {deal['rarity']} | {deal['seller_tag']}"

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu():
    kb = InlineKeyboardMarkup()
    # –õ—É—á—à–∞—è —Å–¥–µ–ª–∫–∞ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ PlushPepe
    best = deals[0]
    kb.add(InlineKeyboardButton("üî• –õ—É—á—à–∞—è —Å–¥–µ–ª–∫–∞", url=best['market_link']))
    kb.add(InlineKeyboardButton("üìú –í—Å–µ —Å–¥–µ–ª–∫–∏", callback_data="show_all"))
    return kb

# –ö–Ω–æ–ø–∫–∏ —Å–æ —Å–ø–∏—Å–∫–æ–º –≤—Å–µ—Ö —Å–¥–µ–ª–æ–∫
def deals_menu():
    kb = InlineKeyboardMarkup()
    for deal in deals:
        kb.add(InlineKeyboardButton(format_deal(deal), url=deal["market_link"]))
    return kb

# /start
@bot.message_handler(commands=['start'])
def start(message):
    text = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ NFT-–ø–æ–¥–∞—Ä–∫–∞–º üéÅ\n\n"
        "–í—ã–±–∏—Ä–∞–π –∫–æ–º–∞–Ω–¥—É –Ω–∏–∂–µ –∏–ª–∏ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏:\n"
        "/bestdeal ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –ª—É—á—à—É—é —Å–¥–µ–ª–∫—É\n"
        "/alldeals ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Å–¥–µ–ª–∫–∏"
    )
    bot.send_message(message.chat.id, text, reply_markup=main_menu())

# /bestdeal
@bot.message_handler(commands=['bestdeal'])
def bestdeal_cmd(message):
    best = deals[0]  # —Ñ–∏–∫—Å–∏—Ä—É–µ–º PlushPepe –∫–∞–∫ –ª—É—á—à—É—é
    text = f"üíé *–õ—É—á—à–∞—è —Å–¥–µ–ª–∫–∞:*\n{format_deal(best)}\n\n–í—ã–±–µ—Ä–∏ –æ–¥–Ω—É –∏–∑ —Å–¥–µ–ª–æ–∫ –Ω–∏–∂–µ:"
    bot.send_message(message.chat.id, text, parse_mode="Markdown", reply_markup=deals_menu())

# /alldeals
@bot.message_handler(commands=['alldeals'])
def alldeals_cmd(message):
    text = "üìú *–í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ NFT-—Å–¥–µ–ª–∫–∏:*\n\n–í—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏:"
    bot.send_message(message.chat.id, text, parse_mode="Markdown", reply_markup=deals_menu())

# –ö–æ–ª–±—ç–∫–∏ (–º–µ–Ω—é)
@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
    if call.data == "show_all":
        text = "üìú –í—ã–±–µ—Ä–∏ —Å–¥–µ–ª–∫—É –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:"
        bot.send_message(call.message.chat.id, text, reply_markup=deals_menu())
        bot.answer_callback_query(call.id)
    else:
        bot.answer_callback_query(call.id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")

# –õ–æ–≤–∏–º –ª—é–±—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
@bot.message_handler(func=lambda message: True)
def any_text(message):
    bot.reply_to(message, "–ò—Å–ø–æ–ª—å–∑—É–π /start, /bestdeal –∏–ª–∏ /alldeals –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ –º–Ω–æ–π!")

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot.polling(none_stop=True)



import json
from typing import List, Dict, Any


class TelegramGiftFilter:
    def init(self, gifts: List[Dict[str, Any]]):
        self.gifts = gifts

    def filter(
        self,
        pattern: str = None,
        background: str = None,
        model: str = None,
        rarity: str = None,
        collection: str = None,
        mint_range: tuple = None
    ) -> List[Dict[str, Any]]:
        """–§–∏–ª—å—Ç—Ä—É–µ—Ç –ø–æ–¥–∞—Ä–∫–∏ –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º"""
        result = self.gifts

        if pattern:
            result = [g for g in result if g.get("pattern") == pattern]
        if background:
            result = [g for g in result if g.get("background") == background]
        if model:
            result = [g for g in result if g.get("model") == model]
        if rarity:
            result = [g for g in result if g.get("rarity") == rarity]
        if collection:
            result = [g for g in result if g.get("collection") == collection]
        if mint_range:
            low, high = mint_range
            result = [
                g for g in result
                if low <= int(g.get("mint_number", 0)) <= high
            ]
        return result

    def list_unique(self, key: str) -> List[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ –∫–ª—é—á—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤—Å–µ —É–∑–æ—Ä—ã –∏–ª–∏ –º–æ–¥–µ–ª–∏)"""
        return sorted(set(g.get(key) for g in self.gifts if g.get(key)))

    def rarity_score(self, gift: Dict[str, Any]) -> float:
        """–í—ã—á–∏—Å–ª—è–µ—Ç —É—Å–ª–æ–≤–Ω—É—é —Ä–µ–¥–∫–æ—Å—Ç—å –ø–æ–¥–∞—Ä–∫–∞"""
        weights = {
            "pattern": 0.35,
            "background": 0.25,
            "model": 0.15,
            "rarity": 0.2,
            "mint_number": 0.05,
        }
        score = 0
        for key, weight in weights.items():
            value = gift.get(key)
            if not value:
                continue
            rarity_value = 1 / (self._frequency(key, value) or 1)
            score += rarity_value * weight
        return round(score, 4)

    def _frequency(self, key: str, value: str) -> int:
        """–°—á–∏—Ç–∞–µ—Ç, —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ (–Ω—É–∂–Ω–æ –¥–ª—è rarity_score)"""
        return sum(1 for g in self.gifts if g.get(key) == value)


# === –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è ===

if name == "main":
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–µ API)
    with open("gifts.json", "r", encoding="utf-8") as f:
        gifts = json.load(f)

    gf = TelegramGiftFilter(gifts)

    # –í—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —É–∑–æ—Ä—ã, —Ñ–æ–Ω—ã –∏ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
    print("–£–∑–æ—Ä—ã:", gf.list_unique("pattern"))
    print("–§–æ–Ω—ã:", gf.list_unique("background"))
    print("–ö–æ–ª–ª–µ–∫—Ü–∏–∏:", gf.list_unique("collection"))

    # –§–∏–ª—å—Ç—Ä: —Ä–µ–¥–∫–∏–µ –ø–æ–¥–∞—Ä–∫–∏ —Å —É–∑–æ—Ä–æ–º "Haunted House" –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ "Halloween"
    rare_ones = gf.filter(pattern="Haunted House", collection="Halloween")
    print(f"–ù–∞–π–¥–µ–Ω–æ {len(rare_ones)} —Ä–µ–¥–∫–∏—Ö –ø–æ–¥–∞—Ä–∫–æ–≤!")

    # –ü–æ–¥—Å—á—ë—Ç —Ä–µ–¥–∫–æ—Å—Ç–∏ –ø–µ—Ä–≤–æ–≥–æ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ
    if rare_ones:
        print("–†–µ–¥–∫–æ—Å—Ç—å –ø–µ—Ä–≤–æ–≥–æ:", gf.rarity_score(rare_ones[0]))